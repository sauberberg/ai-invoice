import os
import streamlit as st
from dotenv import load_dotenv

import fitz  # PyMuPDF for PDF text extraction
from PIL import Image
import pytesseract

# 1. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# 2. UI
st.set_page_config(page_title="Invoice AI", layout="centered")
st.title("üåç AI Multi-country Accountant")

with st.form(key="input_form"):
    country = st.selectbox("–°—Ç—Ä–∞–Ω–∞", ["–ì–µ—Ä–º–∞–Ω–∏—è", "–ü–æ–ª—å—à–∞", "–§—Ä–∞–Ω—Ü–∏—è", "–ò—Ç–∞–ª–∏—è"])
    company_type = st.selectbox("–¢–∏–ø —é—Ä. –ª–∏—Ü–∞", ["GmbH", "Freelancer", "SAS", "SRL"])
    vat = st.radio("–ü–ª–∞—Ç–µ–ª—å—â–∏–∫ –ù–î–°?", ["–î–∞", "–ù–µ—Ç"])
    language = st.selectbox("–Ø–∑—ã–∫", ["Deutsch", "English", "Fran√ßais", "Polski"])
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF/JPG/PNG", type=["pdf", "jpg", "png", "jpeg"])
    manual_text = st.text_area("–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é", height=140)
    submit = st.form_submit_button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")

# 3. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def extract_text_from_pdf(pdf_file):
    text = ""
    try:
        doc = fitz.open(stream=pdf_file.read(), filetype="pdf")
        for page in doc:
            text += page.get_text("text")
        doc.close()
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF: {e}")
    return text.strip()

def extract_text_from_image(image_file, lang_code):
    try:
        image = Image.open(image_file)
        text = pytesseract.image_to_string(image, lang=lang_code)
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ OCR: {e}")
        text = ""
    return text.strip()

# 4. –ú—ç–ø–ø–∏–Ω–≥ —è–∑—ã–∫–æ–≤ –¥–ª—è OCR –∏ LLM
ocr_langs = {"Deutsch": "deu", "English": "eng", "Fran√ßais": "fra", "Polski": "pol"}

# 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–±–º–∏—Ç–∞ —Ñ–æ—Ä–º—ã
if submit:
    # 5.1 –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞
    if not uploaded_file and not manual_text:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        st.stop()

    extracted_text = ""
    if uploaded_file:
        file_name = uploaded_file.name.lower()
        if file_name.endswith(".pdf"):
            extracted_text = extract_text_from_pdf(uploaded_file)
        else:
            extracted_text = extract_text_from_image(uploaded_file, ocr_langs.get(language, "eng"))

    # –ï—Å–ª–∏ –æ–±–∞ –µ—Å—Ç—å ‚Äî –¥–æ–ø–æ–ª–Ω—è–µ–º
    input_text = extracted_text.strip()
    if manual_text:
        if input_text:
            input_text += "\n" + manual_text.strip()
        else:
            input_text = manual_text.strip()

    # 5.2 –ö–æ–Ω—Ç—Ä–æ–ª—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if not input_text:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        st.stop()

    # 5.3 –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
    prompt = (
        f"–°—Ç—Ä–∞–Ω–∞: {country}\n"
        f"–¢–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏: {company_type}\n"
        f"–ù–î–° –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {vat}\n"
        f"–ó–∞–¥–∞–Ω–∏–µ: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞, –≤—ã–≤–µ–¥–∏ —Ä–µ–∑—é–º–µ, –ø—Ä–µ–¥–ª–æ–∂–∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π actionable insights –¥–ª—è –±–∏–∑–Ω–µ—Å–∞. "
        f"–û—Ç–≤–µ—Ç—å –Ω–∞ —è–∑—ã–∫–µ: {language}.\n"
        f"–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n\"\"\"\n{input_text}\n\"\"\""
    )

    # 5.4 –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
    if not OPENAI_API_KEY:
        st.error("API-–∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ OPENAI_API_KEY –≤ .env.")
        st.stop()

    # 5.5 –í—ã–∑–æ–≤ OpenAI —á–µ—Ä–µ–∑ langchain-openai (–∏–ª–∏ fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π)
    try:
        try:
            from langchain_openai import ChatOpenAI
        except ImportError:
            from langchain.chat_models import ChatOpenAI

        llm = ChatOpenAI(
            model_name="gpt-4o",  # –ò–ª–∏ gpt-3.5-turbo, –µ—Å–ª–∏ gpt-4o –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            openai_api_key=OPENAI_API_KEY,
            temperature=0.0
        )

        from langchain.schema import SystemMessage, HumanMessage
        system_msg = SystemMessage(content=f"You are a professional accountant for EU companies. Answer in {language}.")
        user_msg = HumanMessage(content=prompt)
        ai_response = llm([system_msg, user_msg])
        result_text = ai_response.content if hasattr(ai_response, "content") else str(ai_response)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        st.stop()

    # 5.6 –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    st.write(result_text)

    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (.txt)",
        data=result_text,
        file_name="ai_invoice_recommendations.txt",
        mime="text/plain"
    )
